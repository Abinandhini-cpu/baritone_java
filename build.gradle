/*
 * This file is part of Baritone.
 *
 * Baritone is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Baritone is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Baritone.  If not, see <https://www.gnu.org/licenses/>.
 */

group 'baritone'
version project.version

buildscript {
    repositories {
        maven { url = 'http://repo.spongepowered.org/maven' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url 'https://www.dimdev.org/maven/' }
        jcenter()
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

def forgeBuild = project.hasProperty('forgebuild') ? project.property('forgebuild').toBoolean() : false

import baritone.gradle.task.CreateDistTask
import baritone.gradle.task.ProguardTask

apply plugin: 'java'
if (forgeBuild) {
	apply plugin: 'net.minecraftforge.gradle.forge'
} else {
	apply plugin: 'net.minecraftforge.gradle.tweaker-client'
}
apply plugin: 'org.spongepowered.mixin'

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

sourceSets {
    launch {
        compileClasspath += main.compileClasspath + main.runtimeClasspath + main.output
    }
}


minecraft {
    version = forgeBuild ? project.minecraftVersion + project.forgeVersion : project.minecraftVersion
    runDir = 'run'
    mappings = project.mappingsVer
    makeObfSourceJar = true
    if (!forgeBuild) {
		tweakClass = 'baritone.launch.BaritoneTweaker'
    }
}

repositories {
    mavenCentral()

    maven {
        name = 'spongepowered-repo'
        url = 'http://repo.spongepowered.org/maven/'
    }

    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
}

dependencies {
    runtime launchCompile('com.github.ImpactDevelopment:SimpleTweaker:1.2')
    runtime launchCompile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
    testImplementation 'junit:junit:4.12'
}

mixin {
    defaultObfuscationEnv forgeBuild ? searge : notch
    add sourceSets.launch, 'mixins.baritone.refmap.json'
}
if(forgeBuild){
    jar {
        from sourceSets.launch.output, sourceSets.api.output
        manifest.attributes(
            "Version": version,
            "ForgeBuild": forgeBuild,
	        "MixinConfigs": 'mixins.client.json',
	        "tweakClass": 'org.spongepowered.asm.launch.MixinTweaker',
	        "TweakOrder": 0,
	        "FMLCorePluginContainsFMLMod": 'baritone.forge.MixinLoader',
	        "Manifest-Version": 1.0
	    )
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}else{
     jar {
        from sourceSets.launch.output, sourceSets.api.output
        manifest.attributes(
            "Version:": version,
            "ForgeBuild": forgeBuild,
            "Manifest-Version": 1.0
        )
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

task proguard(type: ProguardTask) {
    url 'https://downloads.sourceforge.net/project/proguard/proguard/6.0/proguard6.0.3.zip'
    extract 'proguard6.0.3/lib/proguard.jar'
    versionManifest 'https://launchermeta.mojang.com/mc/game/version_manifest.json'
}

task createDist(type: CreateDistTask, dependsOn: proguard)

build.finalizedBy(createDist)

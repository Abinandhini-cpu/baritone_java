/*
 * This file is part of Baritone.
 *
 * Baritone is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Baritone is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Baritone.  If not, see <https://www.gnu.org/licenses/>.
 */

group 'baritone'
version '1.0.0'

buildscript {
    ext {
        forgeGradleVersion = [
                '1.12.2': '2.3-SNAPSHOT',
                '1.11.2': '2.2-SNAPSHOT',
                '1.10.2': '2.2-SNAPSHOT',
                '1.9.4' : '2.2-SNAPSHOT'
        ]
    }

    repositories {
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'SpongePowered'
            url = 'http://repo.spongepowered.org/maven'
        }
        jcenter()
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:${forgeGradleVersion[project.mcversion]}"
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.tweaker-client'
apply plugin: 'org.spongepowered.mixin'

def getWrapperSourceSet() {
    switch (project.mcversion) {
        case '1.12.2':
            return sourceSets.wrapper_1_12_2
        case '1.11.2':
            return sourceSets.wrapper_1_11_2
        case '1.10.2':
            return sourceSets.wrapper_1_10_2
        case '1.9.4':
            return sourceSets.wrapper_1_9_4
    }
    return null
}

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

sourceSets {
    launch {
        compileClasspath += main.compileClasspath + main.runtimeClasspath + main.output
    }

    wrapper {
        compileClasspath += launch.compileClasspath
    }

    // There is likely a better way to do this, but too lazy to find out
    switch (project.mcversion) {
        case '1.12.2':
            wrapper_1_12_2 {
                compileClasspath += wrapper.compileClasspath + wrapper.output
            }
            break
        case '1.11.2':
            wrapper_1_11_2 {
                compileClasspath += wrapper.compileClasspath + wrapper.output
            }
            break
        case '1.10.2':
            wrapper_1_10_2 {
                compileClasspath += wrapper.compileClasspath + wrapper.output
            }
            break
        case '1.9.4':
            wrapper_1_9_4 {
                compileClasspath += wrapper.compileClasspath + wrapper.output
            }
            break
    }

    launch.compileClasspath += project.getWrapperSourceSet().compileClasspath + project.getWrapperSourceSet().output

    main {
        compileClasspath += wrapper.output
    }
}

minecraft {
    version = project.mcversion
    mappings = 'snapshot_20180731'
    tweakClass = 'baritone.launch.BaritoneTweaker'
    runDir = 'run'
    makeObfSourceJar = false
}

repositories {
    mavenCentral()

    maven {
        name = 'spongepowered-repo'
        url = 'http://repo.spongepowered.org/maven/'
    }
}

dependencies {
    runtime launchCompile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
    testImplementation 'junit:junit:4.12'
}

mixin {
    defaultObfuscationEnv notch
    add sourceSets.launch, 'mixins.baritone.refmap.json'
    add project.getWrapperSourceSet(), 'mixins.baritone.wrapper.refmap.json'
}

jar {
    from sourceSets.launch.output
}
